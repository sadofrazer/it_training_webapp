# IT TRAINING PIPELINE CI/CD To Build, Test and deploy our Rest Api

stages:
- build
- Test Image
- Push Image
#Code Review
#Clear Review
- Deploy Prod

variables:
    IMAGE_NAME_FORMATION: "sadofrazer/ittraining_api_formation:${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}"
    IMAGE_NAME_UTILISATEUR: "sadofrazer/ittraining_api_utilisateur:${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}"
    IMAGE_NAME_LOGISTIQUE: "sadofrazer/ittraining_api_logistique:${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}"
    IMAGE_NAME_DASHBOARD: "sadofrazer/ittraining_api_dashboard:${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}"
    CONTAINER_NAME_FORMATION: "rest_api_formation"
    CONTAINER_NAME_UTILISATEUR: "rest_api_utilisateur"
    CONTAINER_NAME_LOGISTIQUE: "rest_api_logistique"
    CONTAINER_NAME_DASHBOARD: "rest_api_dashboard"
    PROD_CONTAINER_NAME: "prod_api_rest"
    PRODUCTION_HOST: "34.70.85.182"
    #REVIEW_PORT: $((5000 + RANDOM % 10))


image: docker:latest
services:
    - name: docker:dind
      alias: docker-frazer

build dockerhub formation:
    stage: build
    tags:
      - runner-prod
    script:
        - docker build -t ${IMAGE_NAME_FORMATION} webServices/FormationRestApi/
        #- docker save ${IMAGE_NAME_FORMATION} > FormationRestApi_public.tar
    #artifacts:
      #  paths:
        #    - FormationRestApi_public.tar

test image formation:
    stage: Test Image
    tags:
      - runner-prod
    script:
        - echo 'Test Image'
        #- docker load < FormationRestApi_public.tar
        - docker images
        - sh del_containers.sh
        - sleep 2
        - docker run --name $CONTAINER_NAME_FORMATION -d -p 5001:8080 $IMAGE_NAME_FORMATION
        - sleep 5
        - apk --no-cache add curl
        - curl http://it-training-bdd.cloudapps-cm.com:5001/FormationRestApi/rest/domaine | grep -iq "idDomaine"
        - curl http://it-training-bdd.cloudapps-cm.com:5001/FormationRestApi/rest/theme | grep -iq "idTheme"
        - curl http://it-training-bdd.cloudapps-cm.com:5001/FormationRestApi/rest/formation | grep -iq "idFormation"
        - curl http://it-training-bdd.cloudapps-cm.com:5001/FormationRestApi/rest/formation/1 | grep -iq "idFormation"
        - echo "test OK"

test image merge:
    stage: Test Image
    tags:
      - runner-prod
    script:
        - echo 'Test Image'
        #- docker load < FormationRestApi_public.tar
        - docker images
        - sh del_containers.sh
        - sleep 2
        - docker run --name $CONTAINER_NAME_FORMATION -d -p 5001:8080 $IMAGE_NAME_FORMATION
        - docker run --name $CONTAINER_NAME_UTILISATEUR -d -p 5002:8080 $IMAGE_NAME_UTILISATEUR
        - sleep 5
        - apk --no-cache add curl
        - curl http://it-training-bdd.cloudapps-cm.com:5001/FormationRestApi/rest/formation | grep -iq "idFormation"
        - curl http://it-training-bdd.cloudapps-cm.com:5001/FormationRestApi/rest/theme | grep -iq "idTheme"
        - curl http://it-training-bdd.cloudapps-cm.com:5002/UtilisateurRestApi/rest/utilisateur | grep -iq "id" || true
        - curl http://it-training-bdd.cloudapps-cm.com:5002/UtilisateurRestApi/rest/apprenant | grep -iq "id" || true
        - echo "test OK"
    rules:
        - if: $CI_PIPELINE_SOURCE == "merge_request_event"

Release all:
    stage: Push Image
    tags:
      - runner-prod
    script:
        - docker login -u sadofrazer -p ${PASSWORD}
        - docker push ${IMAGE_NAME_FORMATION}
        - docker push ${IMAGE_NAME_UTILISATEUR}
        - docker logout
        - sh del_containers.sh
        #- docker rmi ${IMAGE_NAME_FORMATION} || true

# FIN CI et DEBUT PHASES CD
deploy Formation:
    stage: Deploy Prod
    tags:
      - runner-prod
    image: alpine
    services:
        - name: alpine
          alias: alpine-frazer
    before_script:
      # Get ssh keys from target server and add them to known_hosts
      - apk update
      - 'which ssh-agent || ( apk add openssh-client )'
      - eval $(ssh-agent -s)
      - mkdir -p ~/.ssh
      - chmod 700 ~/.ssh
      - ssh-keyscan -p 22 -4 $PRODUCTION_HOST >> ~/.ssh/known_hosts
      - chmod 644 ~/.ssh/known_hosts
      # Add the private key defined in PRIVATE_KEY variable
      - echo "$PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null 
    script:
      - echo "Deploying API on prod env"
      - ssh sadofrazer@$PRODUCTION_HOST -p 22 "sh /home/sadofrazer/del_containers.sh"
      #FORMATION
      - ssh sadofrazer@$PRODUCTION_HOST -p 22 "docker stop ${PROD_CONTAINER_NAME}_formation" || true
      - ssh sadofrazer@$PRODUCTION_HOST -p 22 "docker rm ${PROD_CONTAINER_NAME}_formation" || true
      - ssh sadofrazer@$PRODUCTION_HOST -p 22 "docker rmi ${IMAGE_NAME_FORMATION} || true"
      - ssh sadofrazer@$PRODUCTION_HOST -p 22 "docker run --name ${PROD_CONTAINER_NAME}_formation -d -p 8081:8080 --restart=always ${IMAGE_NAME_FORMATION}"
      - sleep 5
      - apk --no-cache add curl
      - curl http://it-training-bdd.cloudapps-cm.com:8081/FormationRestApi/rest/domaine | grep -iq "idDomaine"
      - curl http://it-training-bdd.cloudapps-cm.com:8081/FormationRestApi/rest/theme | grep -iq "idTheme"
      - curl http://it-training-bdd.cloudapps-cm.com:8081/FormationRestApi/rest/formation | grep -iq "idFormation"
      - curl http://it-training-bdd.cloudapps-cm.com:8081/FormationRestApi/rest/formation/1 | grep -iq "idFormation"
    environment: 
        name: Formation_prod_env
        url: "http://${PRODUCTION_HOST}:8081/FormationRestApi/rest/domaine"
    only:
      - main
  

#####################################  USER  ####################################

build dockerhub user:
    stage: build
    tags:
      - runner-prod
    script:
        - docker build -t ${IMAGE_NAME_UTILISATEUR} webServices/UtilisateurRestApi/
        - docker save ${IMAGE_NAME_UTILISATEUR} > UtilisateurRestApi_public.tar
    artifacts:
        paths:
            - UtilisateurRestApi_public.tar
  
test image user:
    stage: Test Image
    tags:
      - runner-prod
    script:
        - echo 'Test Image'
        - docker load < UtilisateurRestApi_public.tar
        - docker images
        - sh del_containers.sh
        - sleep 2
        - docker run --name $CONTAINER_NAME_UTILISATEUR -d -p 5002:8080 $IMAGE_NAME_UTILISATEUR
        - sleep 5
        - apk --no-cache add curl
        - curl http://it-training-bdd.cloudapps-cm.com:5002/UtilisateurRestApi/rest/utilisateur | grep -iq "id" || true
        - curl http://it-training-bdd.cloudapps-cm.com:5002/UtilisateurRestApi/rest/apprenant | grep -iq "id" || true
        - curl http://it-training-bdd.cloudapps-cm.com:5002/UtilisateurRestApi/rest/formateur | grep -iq "id" || true
        - curl http://it-training-bdd.cloudapps-cm.com:5002/UtilisateurRestApi/rest/utilisateur/1 | grep -iq "id" || true
        - echo "test OK"
    #rules:
        #- if: ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")

deploy Utilisateur:
    stage: Deploy Prod
    tags:
      - runner-prod
    image: alpine
    services:
        - name: alpine
          alias: alpine-frazer
    before_script:
      # Get ssh keys from target server and add them to known_hosts
      - apk update
      - 'which ssh-agent || ( apk add openssh-client )'
      - eval $(ssh-agent -s)
      - mkdir -p ~/.ssh
      - chmod 700 ~/.ssh
      - ssh-keyscan -p 22 -4 $PRODUCTION_HOST >> ~/.ssh/known_hosts
      - chmod 644 ~/.ssh/known_hosts
      # Add the private key defined in PRIVATE_KEY variable
      - echo "$PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null 
    script:
      - echo "Deploying API on prod env"
      - ssh sadofrazer@$PRODUCTION_HOST -p 22 "sh /home/sadofrazer/del_containers.sh"
      #UTILISATEUR
      - ssh sadofrazer@$PRODUCTION_HOST -p 22 "docker stop ${PROD_CONTAINER_NAME}_utilisateur" || true
      - ssh sadofrazer@$PRODUCTION_HOST -p 22 "docker rm ${PROD_CONTAINER_NAME}_utilisateur" || true
      - ssh sadofrazer@$PRODUCTION_HOST -p 22 "docker rmi ${IMAGE_NAME_UTILISATEUR} || true"
      - ssh sadofrazer@$PRODUCTION_HOST -p 22 "docker run --name ${PROD_CONTAINER_NAME}_utilisateur -d -p 8082:8080 --restart=always ${IMAGE_NAME_UTILISATEUR}"
      - sleep 5
      - apk --no-cache add curl
      - curl http://it-training-bdd.cloudapps-cm.com:8082/UtilisateurRestApi/rest/utilisateur | grep -iq "id" || true
      - curl http://it-training-bdd.cloudapps-cm.com:8082/UtilisateurRestApi/rest/apprenant | grep -iq "id" || true
      - curl http://it-training-bdd.cloudapps-cm.com:8082/UtilisateurRestApi/rest/formateur | grep -iq "id" || true
      - curl http://it-training-bdd.cloudapps-cm.com:8082/UtilisateurRestApi/rest/utilisateur/1 | grep -iq "id" || true
      - echo "test OK"
    environment: 
        name: User_prod_env
        url: "http://${PRODUCTION_HOST}:8082/UtilisateurRestApi/rest/utilisateur"
    only:
      - main
